#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov  5 14:29:14 2019

@author: kirahart
"""

"""
Created on Sun Nov  3 15:35:55 2019
Implementation of 2D ADI Solver
@author: kirahart
"""

import numpy as np
import matplotlib.pyplot as plt
import cmath
import h5py
import argparse
from collections import namedtuple

#load other written functions
from TDM import TDMsolve, TDMmultiply
from bpm_initial_conditions import GaussianBeam_BPM_FFT2D

class ADI2D:
    def setstep(dx, dy, dz,k0):
        ideltaX = (0+1j)*dz/(4.0*k0*dx*dx);
        ideltaY = (0+1j)*dz/(4.0*k0*dy*dy);
        return(ideltaX, ideltaY)
        
    def allocate():
       # set up coordinate grid
       dimX = NX;
       dimY = NY;
       cx  = np.zeros(dimX, dtype='complex')
       cy  = np.zeros(dimY, dtype='complex')
       i=0
       while i < dimX:
           cx[i] = (LX/dimX)*(i - dimX/2.0);
           cy[i] = (LY/dimY)*(i - dimY/2.0);
           i = i+1
      
       #grid spacing
       dx = cx[1]-cx[0]
       dy = cy[1]-cy[0]